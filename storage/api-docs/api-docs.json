{
    "openapi": "3.0.0",
    "info": {
        "title": "Resonance API Documentation",
        "description": "API documentation for Resonance",
        "contact": {
            "email": "casier07@hotmail.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://resonance-be.ddev.site",
            "description": "API Server"
        }
    ],
    "paths": {
        "/api/artist-checkins": {
            "get": {
                "tags": [
                    "Artist Checkins"
                ],
                "summary": "Get all artist check-ins",
                "operationId": "3d7bb97360d1c1dd45d9307aac331418",
                "responses": {
                    "200": {
                        "description": "List of all artist check-ins",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "artist": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "checkin": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "concert_id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "user_id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                }
            },
            "post": {
                "tags": [
                    "Artist Checkins"
                ],
                "summary": "Create a new artist check-in",
                "operationId": "e96bd0e8be6dadd9e24e79eac83ddfe3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "checkin_id",
                                    "artist_id"
                                ],
                                "properties": {
                                    "checkin_id": {
                                        "description": "ID of the check-in",
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "artist_id": {
                                        "description": "ID of the artist",
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Artist check-in created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Artist check-in created successfully"
                                        },
                                        "artist_checkin": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "checkin_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "artist_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Unauthorized - User can only add artist check-ins to their own check-ins"
                    }
                }
            }
        },
        "/api/artist-checkins/{id}": {
            "get": {
                "tags": [
                    "Artist Checkins"
                ],
                "summary": "Get a specific artist check-in",
                "operationId": "a1e747f2e06e5ebb8c09b03f2d13a957",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist check-in UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist check-in details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "artist": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "name": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "checkin": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "concert_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "user_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Artist check-in not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Artist Checkins"
                ],
                "summary": "Delete an artist check-in",
                "operationId": "d5b7d5defb764b767e8c4011b352c8e6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist check-in UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Artist check-in deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized - User can only delete their own artist check-ins"
                    },
                    "404": {
                        "description": "Artist check-in not found"
                    }
                }
            }
        },
        "/api/artists": {
            "get": {
                "tags": [
                    "Artists"
                ],
                "summary": "Get all artists",
                "operationId": "2c8aed1387cca1c65d98da7ee11ac926",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "name",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending_approval",
                                "verified",
                                "rejected"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search in name and description",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of artists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Artist"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string"
                                                },
                                                "last": {
                                                    "type": "string"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Artists"
                ],
                "summary": "Create a new artist",
                "operationId": "83d2888bdc6fac66b9a7cc81c4c950fb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "David Guetta"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "French DJ and music producer known for electronic dance music.",
                                        "nullable": true
                                    },
                                    "country": {
                                        "type": "string",
                                        "example": "Belgium",
                                        "nullable": true
                                    },
                                    "formed_year": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2002",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "https://resonance-be.ddev.site/storage/artists/david-guetta.jpg",
                                        "nullable": true
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "pending_approval"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Artist created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artist"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/artists/{id}": {
            "get": {
                "tags": [
                    "Artists"
                ],
                "summary": "Get a specific artist",
                "operationId": "d0b68c06b8bc310fbe24c6d3ea80dac3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artist"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Artists"
                ],
                "summary": "Update an artist",
                "operationId": "5a5632ea389f9a05336f8d035f5a44c0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "David Guetta"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "French DJ and music producer known for electronic dance music.",
                                        "nullable": true
                                    },
                                    "country": {
                                        "type": "string",
                                        "example": "Belgium",
                                        "nullable": true
                                    },
                                    "formed_year": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2002",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "https://resonance-be.ddev.site/storage/artists/david-guetta.jpg",
                                        "nullable": true
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "verified"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Artist updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artist"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Artists"
                ],
                "summary": "Delete an artist",
                "operationId": "4f6d8bd2c8b4b738af7589b72348ac20",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Artist deleted successfully"
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            }
        },
        "/api/artists/{id}/concerts": {
            "get": {
                "tags": [
                    "Artists"
                ],
                "summary": "Get all concerts for an artist",
                "operationId": "c3d98b6e4eabc69197d47fdf2f86ed29",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "date",
                            "enum": [
                                "date",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "date_from",
                        "in": "query",
                        "description": "Filter concerts from this date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2024-01-01"
                        }
                    },
                    {
                        "name": "date_to",
                        "in": "query",
                        "description": "Filter concerts until this date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2024-12-31"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by location name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "event",
                        "in": "query",
                        "description": "Filter by event name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending_approval",
                                "verified",
                                "rejected"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of concerts for the artist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Concert"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string"
                                                },
                                                "last": {
                                                    "type": "string"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Artists"
                ],
                "summary": "Attach an artist to a concert",
                "operationId": "2c1973a9e7df6118c16f3b4e0be86a19",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "concert_id"
                                ],
                                "properties": {
                                    "concert_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Artist attached to concert successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Artist attached to concert successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Concert"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist or concert not found"
                    },
                    "422": {
                        "description": "Validation error or artist already attached"
                    }
                }
            }
        },
        "/api/artists/{id}/concerts/{concertId}": {
            "delete": {
                "tags": [
                    "Artists"
                ],
                "summary": "Detach an artist from a concert",
                "operationId": "8599905ae024e0806868211e8bff2f5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "concertId",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist detached from concert successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Artist detached from concert successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist or concert not found"
                    }
                }
            }
        },
        "/api/artists/{id}/genres": {
            "get": {
                "tags": [
                    "Artists"
                ],
                "summary": "Get all genres for an artist",
                "operationId": "fc4b95ef4efd1736e98d504ce254c9ee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of genres for the artist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Artists"
                ],
                "summary": "Attach genres to an artist",
                "operationId": "00ea3d44aae944e2f9f0ac6810508ffd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "genre_ids"
                                ],
                                "properties": {
                                    "genre_ids": {
                                        "description": "Array of genre UUIDs to attach",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Genres attached successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artist"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/artists/{id}/genres/{genreId}": {
            "delete": {
                "tags": [
                    "Artists"
                ],
                "summary": "Detach a genre from an artist",
                "operationId": "f04fa8b3541b7937bf6a8c3dd98b6fca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "genreId",
                        "in": "path",
                        "description": "Genre UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre detached successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artist"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Artist or genre not found"
                    }
                }
            }
        },
        "/api/checkin-comments": {
            "get": {
                "tags": [
                    "Checkin Comments"
                ],
                "summary": "Get all comments for a checkin",
                "operationId": "11a3413597aa4f29d885f53b03b4dfb5",
                "parameters": [
                    {
                        "name": "checkin_id",
                        "in": "query",
                        "description": "ID of the checkin to get comments for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "checkin_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "user_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "comment": {
                                                "type": "string"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "user": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "username": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid checkin ID provided"
                    }
                }
            },
            "post": {
                "tags": [
                    "Checkin Comments"
                ],
                "summary": "Create a new comment on a checkin",
                "operationId": "878acbf25447c0aac2d2e42487f71a5c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "checkin_id",
                                    "comment"
                                ],
                                "properties": {
                                    "checkin_id": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 1000,
                                        "minLength": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "checkin_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "comment": {
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/checkin-comments/{id}": {
            "get": {
                "tags": [
                    "Checkin Comments"
                ],
                "summary": "Get a specific comment",
                "operationId": "e758af3ffaede77f96a8e7ac51d7424b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Comment ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "checkin_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "comment": {
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "username": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Checkin Comments"
                ],
                "summary": "Update a comment",
                "operationId": "aa3d896e8adbb6da8d338c378c2f7b3b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Comment ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "comment"
                                ],
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 1000,
                                        "minLength": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "checkin_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "comment": {
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized to update this comment"
                    },
                    "404": {
                        "description": "Comment not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Checkin Comments"
                ],
                "summary": "Delete a comment",
                "operationId": "446c6e444277c083502e4625a287c661",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Comment ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized to delete this comment"
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/checkins": {
            "get": {
                "tags": [
                    "Checkins"
                ],
                "summary": "Get all check-ins",
                "operationId": "6f00e3d42adc0b6286723cba1cbce994",
                "responses": {
                    "200": {
                        "description": "List of all check-ins",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "concert_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "user_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "concert": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "date": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "user": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                }
            },
            "post": {
                "tags": [
                    "Checkins"
                ],
                "summary": "Create a new check-in",
                "operationId": "7fb8a2ab9b377effb22fa0e2a15e67fa",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "concert_id"
                                ],
                                "properties": {
                                    "concert_id": {
                                        "description": "ID of the concert to check in to",
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Check-in created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "concert_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/checkins/{id}": {
            "get": {
                "tags": [
                    "Checkins"
                ],
                "summary": "Get a specific check-in",
                "operationId": "37ff3444ffc47eac70f227d9bb2f9e27",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Check-in UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Check-in details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "concert_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "user_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "concert": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "date": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "name": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Check-in not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Checkins"
                ],
                "summary": "Delete a check-in",
                "operationId": "1d1071122733ba2bfe9316baa7165a50",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Check-in UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Check-in deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Check-in not found"
                    }
                }
            }
        },
        "/api/checkin-likes": {
            "get": {
                "tags": [
                    "Checkin Likes"
                ],
                "summary": "Get all likes for a checkin",
                "operationId": "216d88c5629d9c16538bb28470bf7ddb",
                "parameters": [
                    {
                        "name": "checkin_id",
                        "in": "query",
                        "description": "ID of the checkin to get likes for",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of likes for the checkin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "checkin_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "user_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "user": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "username": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Checkin not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Checkin Likes"
                ],
                "summary": "Like a checkin",
                "operationId": "0850d36cd1e548561d406316aed874c5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "checkin_id"
                                ],
                                "properties": {
                                    "checkin_id": {
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Like created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Checkin liked successfully"
                                        },
                                        "like": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "checkin_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "user_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "404": {
                        "description": "Checkin not found"
                    },
                    "409": {
                        "description": "Already liked"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/checkin-likes/{checkinLike}": {
            "delete": {
                "tags": [
                    "Checkin Likes"
                ],
                "summary": "Unlike a checkin",
                "operationId": "5c3122f0062de093193cec4ef6a6dbf5",
                "parameters": [
                    {
                        "name": "checkinLike",
                        "in": "path",
                        "description": "UUID of the like to delete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Like removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Like removed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Like not found"
                    },
                    "403": {
                        "description": "Unauthorized to remove this like"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/checkin-photos": {
            "get": {
                "tags": [
                    "Checkin Photos"
                ],
                "summary": "Get all checkin photos",
                "operationId": "4cdcef8dccb0de0d76ec5c05568b7dfa",
                "responses": {
                    "200": {
                        "description": "List of checkin photos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "checkin_id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "url": {
                                                "type": "string"
                                            },
                                            "caption": {
                                                "type": "string",
                                                "nullable": true
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Checkin Photos"
                ],
                "summary": "Create a new checkin photo",
                "operationId": "e464a22de86379318089da6a81797c7f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "checkin_id",
                                    "url"
                                ],
                                "properties": {
                                    "checkin_id": {
                                        "type": "string",
                                        "format": "uuid"
                                    },
                                    "url": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Photo created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "checkin_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "url": {
                                                    "type": "string"
                                                },
                                                "caption": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/checkin-photos/{id}": {
            "get": {
                "tags": [
                    "Checkin Photos"
                ],
                "summary": "Get a specific checkin photo",
                "operationId": "f1ad234186798909fe40bc51c20577cc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UUID of the checkin photo",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checkin photo details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "checkin_id": {
                                            "type": "string",
                                            "format": "uuid"
                                        },
                                        "url": {
                                            "type": "string"
                                        },
                                        "caption": {
                                            "type": "string",
                                            "nullable": true
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Photo not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Checkin Photos"
                ],
                "summary": "Update a checkin photo",
                "operationId": "03fb5fad069a9b55a6211a86e9072134",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UUID of the checkin photo",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "url": {
                                        "type": "string"
                                    },
                                    "caption": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Photo updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "checkin_id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "url": {
                                                    "type": "string"
                                                },
                                                "caption": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Photo not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Checkin Photos"
                ],
                "summary": "Delete a checkin photo",
                "operationId": "e2c29041be0b7f384f06c6d3b1eea891",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UUID of the checkin photo",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Photo not found"
                    }
                }
            }
        },
        "/api/concerts": {
            "get": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Get all concerts",
                "operationId": "7fe55002e3b7e386dc418344a9942fbb",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "date",
                            "enum": [
                                "date",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "date_from",
                        "in": "query",
                        "description": "Filter concerts from this date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2024-01-01"
                        }
                    },
                    {
                        "name": "date_to",
                        "in": "query",
                        "description": "Filter concerts until this date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2024-12-31"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by location name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "event",
                        "in": "query",
                        "description": "Filter by event name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending_approval",
                                "verified",
                                "rejected"
                            ]
                        }
                    },
                    {
                        "name": "genre_ids",
                        "in": "query",
                        "description": "Filter by genre IDs (comma-separated). If filter_mode=all, all artists must have all genres. If filter_mode=any, any artist must have any of the genres.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "123e4567-e89b-12d3-a456-426614174000,987fcdeb-51a2-43d7-9012-345678901234"
                        }
                    },
                    {
                        "name": "filter_mode",
                        "in": "query",
                        "description": "Filter mode for genres. 'all' requires all artists to have all genres, 'any' includes concerts where any artist has any of the genres.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "any",
                            "enum": [
                                "all",
                                "any"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of concerts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Concert"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string"
                                                },
                                                "last": {
                                                    "type": "string"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Create a new concert",
                "operationId": "a571791541f84db549de179830002615",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "event_id",
                                    "location_id",
                                    "date"
                                ],
                                "properties": {
                                    "event_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "location_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-19"
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "pending_approval"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Concert created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Concert"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/concerts/{id}": {
            "get": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Get a specific concert",
                "operationId": "7a300c3da742086037781e7f07a39725",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concert details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Concert"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concert not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Update a concert",
                "operationId": "db80212e0a8f5b07e59773988e4fdd2d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "event_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "location_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-19"
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "verified"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Concert updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Concert"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concert not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Delete a concert",
                "operationId": "7d8b63d823379ebfa22ae8310590d030",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Concert deleted successfully"
                    },
                    "404": {
                        "description": "Concert not found"
                    }
                }
            }
        },
        "/api/concerts/{id}/artists": {
            "get": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Get all artists for a concert",
                "operationId": "2e39d4e24910bd264b861600aee09b9f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of artists for the concert",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "formed_year": {
                                                        "type": "integer",
                                                        "nullable": true
                                                    },
                                                    "image_url": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "source": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concert not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Attach an artist to a concert",
                "operationId": "430efb3747337a1bad5c1e2a2728e612",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Arctic Monkeys"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Artist attached successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Artist attached successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "name": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concert not found or artist not found"
                    },
                    "422": {
                        "description": "Validation error or artist already attached"
                    }
                }
            }
        },
        "/api/concerts/{id}/artists/{artistId}": {
            "delete": {
                "tags": [
                    "Concerts"
                ],
                "summary": "Detach an artist from a concert",
                "operationId": "273268d28bd3b38db7da600138c15e9c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Concert UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "artistId",
                        "in": "path",
                        "description": "Artist UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist detached successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Artist detached successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concert or artist not found"
                    }
                }
            }
        },
        "/api/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all events",
                "operationId": "7058ab7c89d20c752b6afd6d808f6526",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "start_date",
                            "enum": [
                                "name",
                                "start_date",
                                "end_date",
                                "type",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by event type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "concert",
                                "festival",
                                "tour",
                                "clubnight",
                                "other"
                            ]
                        }
                    },
                    {
                        "name": "start_date_from",
                        "in": "query",
                        "description": "Filter events starting from this date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2024-01-01"
                        }
                    },
                    {
                        "name": "start_date_to",
                        "in": "query",
                        "description": "Filter events starting until this date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2024-12-31"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending_approval",
                                "verified",
                                "rejected"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search in name and description",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Tomorrowland"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid",
                                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Tomorrowland 2024"
                                                    },
                                                    "start_date": {
                                                        "type": "string",
                                                        "format": "date",
                                                        "example": "2024-07-19"
                                                    },
                                                    "end_date": {
                                                        "type": "string",
                                                        "format": "date",
                                                        "example": "2024-07-28"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "The world's biggest electronic dance music festival, featuring the best DJs from around the globe.",
                                                        "nullable": true
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "concert",
                                                            "festival",
                                                            "tour",
                                                            "clubnight",
                                                            "other"
                                                        ],
                                                        "example": "festival"
                                                    },
                                                    "image_url": {
                                                        "type": "string",
                                                        "example": "https://resonance-be.ddev.site/storage/events/tomorrowland-2024.jpg",
                                                        "nullable": true
                                                    },
                                                    "source": {
                                                        "type": "string",
                                                        "example": "manual"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "verified"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string",
                                                    "example": "https://resonance-be.ddev.site/api/events?page=1"
                                                },
                                                "last": {
                                                    "type": "string",
                                                    "example": "https://resonance-be.ddev.site/api/events?page=5"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string",
                                                    "example": "https://resonance-be.ddev.site/api/events?page=2"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create a new event",
                "operationId": "508895e03d7f10edac84357084c87b20",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "start_date",
                                    "end_date",
                                    "type"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Rock Werchter 2024"
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-06-27"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-06-30"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Belgium's biggest rock festival featuring international and local artists.",
                                        "nullable": true
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "concert",
                                            "festival",
                                            "tour",
                                            "clubnight",
                                            "other"
                                        ],
                                        "example": "festival"
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "https://resonance-be.ddev.site/storage/events/rock-werchter-2024.jpg",
                                        "nullable": true
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "pending_approval"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/events/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get a specific event",
                "operationId": "6f743f71f7a88dbe57be1d9c9ebf47cb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update an event",
                "operationId": "fb130dcf1ab4d7abbd3a173741df1f8f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Tomorrowland 2024 - The Story of Planaxis"
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-19"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-28"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "The world's biggest electronic dance music festival, featuring the best DJs from around the globe. This year's theme: The Story of Planaxis.",
                                        "nullable": true
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "concert",
                                            "festival",
                                            "tour",
                                            "clubnight",
                                            "other"
                                        ],
                                        "example": "festival"
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "example": "https://resonance-be.ddev.site/storage/events/tomorrowland-2024-planaxis.jpg",
                                        "nullable": true
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "verified"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Event updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event",
                "operationId": "b8c8f4b41a32532f5e9f7146e511bc61",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Event UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event deleted successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            }
        },
        "/api/followers": {
            "get": {
                "tags": [
                    "Followers"
                ],
                "summary": "Get all followers",
                "operationId": "37c2ff27aa85f457648ddfe5b74d1a46",
                "responses": {
                    "200": {
                        "description": "List of all followers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "follower": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "username": {
                                                        "type": "string"
                                                    },
                                                    "profile_photo_path": {
                                                        "type": "string",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "followed": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "username": {
                                                        "type": "string"
                                                    },
                                                    "profile_photo_path": {
                                                        "type": "string",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                }
            },
            "post": {
                "tags": [
                    "Followers"
                ],
                "summary": "Follow a user",
                "operationId": "71528fa701e18b546c8ab6979ee1fc01",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "followed_id"
                                ],
                                "properties": {
                                    "followed_id": {
                                        "description": "ID of the user to follow",
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully followed user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully followed user"
                                        },
                                        "follower": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "username": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "409": {
                        "description": "Already following this user"
                    }
                }
            }
        },
        "/api/followers/{id}": {
            "delete": {
                "tags": [
                    "Followers"
                ],
                "summary": "Unfollow a user",
                "operationId": "a89ad10b2b31447e85eecda21819ca58",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User UUID to unfollow",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully unfollowed user"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Follow relationship not found"
                    }
                }
            }
        },
        "/api/users/{id}/followers": {
            "get": {
                "tags": [
                    "Followers"
                ],
                "summary": "Get a user's followers",
                "operationId": "819668fa1af997af4920b9cacee84b96",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's followers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "username": {
                                                "type": "string"
                                            },
                                            "profile_photo_path": {
                                                "type": "string",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/users/{id}/following": {
            "get": {
                "tags": [
                    "Followers"
                ],
                "summary": "Get users that a user is following",
                "operationId": "effc90bb8888e86e2a39cb04a138ec11",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users being followed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "username": {
                                                "type": "string"
                                            },
                                            "profile_photo_path": {
                                                "type": "string",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/genres": {
            "get": {
                "tags": [
                    "Genres"
                ],
                "summary": "Get all genres",
                "operationId": "eb12635064fefadf7ff7e54900a73534",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "genre",
                            "enum": [
                                "genre",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search in genre name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of genres",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Genre"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string"
                                                },
                                                "last": {
                                                    "type": "string"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Genres"
                ],
                "summary": "Create a new genre",
                "operationId": "8596dc3b1780529a7ce51429eee5ed0a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "genre"
                                ],
                                "properties": {
                                    "genre": {
                                        "type": "string",
                                        "example": "Electronic Dance Music"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Genre created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Genre"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/genres/{id}": {
            "get": {
                "tags": [
                    "Genres"
                ],
                "summary": "Get a specific genre",
                "operationId": "3e2ac2805d9f25d984bab075133bbb96",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Genre UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenreDetail"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Genre not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Genres"
                ],
                "summary": "Update a genre",
                "operationId": "65d9a201f51320eb4147a75f91a8119b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Genre UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "genre"
                                ],
                                "properties": {
                                    "genre": {
                                        "type": "string",
                                        "example": "Electronic Dance Music"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Genre updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Genre"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Genre not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Genres"
                ],
                "summary": "Delete a genre",
                "operationId": "4ddc050edb0bf18c202c611a028f457f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Genre UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Genre deleted successfully"
                    },
                    "404": {
                        "description": "Genre not found"
                    }
                }
            }
        },
        "/api/locations": {
            "get": {
                "tags": [
                    "Locations"
                ],
                "summary": "Get all locations",
                "operationId": "c22aa1cae7ab2b2ad315141d06fec369",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "name",
                                "city",
                                "country",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_direction",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "Filter by city",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending_approval",
                                "verified",
                                "rejected"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search in name, city, and country",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "string",
                                                        "format": "uuid",
                                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Sportpaleis Antwerpen"
                                                    },
                                                    "street": {
                                                        "type": "string",
                                                        "example": "Schijnpoortweg 119"
                                                    },
                                                    "city": {
                                                        "type": "string",
                                                        "example": "Antwerpen"
                                                    },
                                                    "postal_code": {
                                                        "type": "string",
                                                        "example": "2170"
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "example": "Belgium"
                                                    },
                                                    "latitude": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 51.2306
                                                    },
                                                    "longitude": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 4.4452
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "image_url": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "source": {
                                                        "type": "string",
                                                        "example": "manual"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "verified"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 75
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "links": {
                                            "properties": {
                                                "first": {
                                                    "type": "string"
                                                },
                                                "last": {
                                                    "type": "string"
                                                },
                                                "prev": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "next": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Locations"
                ],
                "summary": "Create a new location",
                "operationId": "055665bfbdc18cab3dc956925a9000b4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sportpaleis Antwerpen"
                                    },
                                    "street": {
                                        "type": "string",
                                        "example": "Schijnpoortweg",
                                        "nullable": true
                                    },
                                    "house_number": {
                                        "type": "string",
                                        "example": "119",
                                        "nullable": true
                                    },
                                    "city": {
                                        "type": "string",
                                        "example": "Antwerpen",
                                        "nullable": true
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "example": "2170",
                                        "nullable": true
                                    },
                                    "country": {
                                        "type": "string",
                                        "example": "Belgium"
                                    },
                                    "latitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 51.2306,
                                        "nullable": true
                                    },
                                    "longitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 4.4452,
                                        "nullable": true
                                    },
                                    "website": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ],
                                        "example": "manual"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ],
                                        "example": "pending_approval"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Location created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Location"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/locations/{id}": {
            "get": {
                "tags": [
                    "Locations"
                ],
                "summary": "Get a specific location",
                "operationId": "bcaac2b6f85e83cdc99139be535c66e6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Location UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Location"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Locations"
                ],
                "summary": "Update a location",
                "operationId": "3ac5d4120b6fb23f55f179649493a2d8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Location UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sportpaleis Antwerpen"
                                    },
                                    "street": {
                                        "type": "string",
                                        "example": "Schijnpoortweg",
                                        "nullable": true
                                    },
                                    "house_number": {
                                        "type": "string",
                                        "example": "119",
                                        "nullable": true
                                    },
                                    "city": {
                                        "type": "string",
                                        "example": "Antwerpen",
                                        "nullable": true
                                    },
                                    "postal_code": {
                                        "type": "string",
                                        "example": "2170",
                                        "nullable": true
                                    },
                                    "country": {
                                        "type": "string",
                                        "example": "Belgium"
                                    },
                                    "latitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 51.2306,
                                        "nullable": true
                                    },
                                    "longitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 4.4452,
                                        "nullable": true
                                    },
                                    "website": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "source": {
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api"
                                        ]
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending_approval",
                                            "verified",
                                            "rejected"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Location updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Location"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Location not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Locations"
                ],
                "summary": "Delete a location",
                "operationId": "721591ee086203214e6eb54f25625656",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Location UUID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Location deleted successfully"
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Artist": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "David Guetta"
                    },
                    "description": {
                        "type": "string",
                        "example": "French DJ and music producer known for electronic dance music.",
                        "nullable": true
                    },
                    "country": {
                        "type": "string",
                        "example": "Belgium",
                        "nullable": true
                    },
                    "formed_year": {
                        "type": "string",
                        "format": "date",
                        "example": "2002",
                        "nullable": true
                    },
                    "image_url": {
                        "type": "string",
                        "example": "https://resonance-be.ddev.site/storage/artists/david-guetta.jpg",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "example": "manual"
                    },
                    "status": {
                        "type": "string",
                        "example": "verified"
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "format": "uuid",
                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "Electronic Dance Music"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Concert": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "event": {
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "name": {
                                "type": "string",
                                "example": "Tomorrowland 2024"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "concert",
                                    "festival",
                                    "tour",
                                    "clubnight",
                                    "other"
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "location": {
                        "properties": {
                            "id": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "name": {
                                "type": "string",
                                "example": "Sportpaleis Antwerpen"
                            },
                            "city": {
                                "type": "string",
                                "example": "Antwerpen"
                            },
                            "country": {
                                "type": "string",
                                "example": "Belgium"
                            }
                        },
                        "type": "object"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-19"
                    },
                    "source": {
                        "type": "string",
                        "example": "manual"
                    },
                    "status": {
                        "type": "string",
                        "example": "verified"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Event": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "Tomorrowland 2024"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-19"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-28"
                    },
                    "description": {
                        "type": "string",
                        "example": "The world's biggest electronic dance music festival, featuring the best DJs from around the globe.",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "concert",
                            "festival",
                            "tour",
                            "clubnight",
                            "other"
                        ],
                        "example": "festival"
                    },
                    "image_url": {
                        "type": "string",
                        "example": "https://resonance-be.ddev.site/storage/events/tomorrowland-2024.jpg",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "example": "manual"
                    },
                    "status": {
                        "type": "string",
                        "example": "verified"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Genre": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "genre": {
                        "type": "string",
                        "example": "Electronic Dance Music"
                    }
                },
                "type": "object"
            },
            "GenreDetail": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Genre"
                    },
                    {
                        "properties": {
                            "created_at": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Location": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "example": "Sportpaleis Antwerpen"
                    },
                    "street": {
                        "type": "string",
                        "example": "Schijnpoortweg",
                        "nullable": true
                    },
                    "house_number": {
                        "type": "string",
                        "example": "119",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "example": "Antwerpen",
                        "nullable": true
                    },
                    "postal_code": {
                        "type": "string",
                        "example": "2170",
                        "nullable": true
                    },
                    "country": {
                        "type": "string",
                        "example": "Belgium"
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": 51.2306,
                        "nullable": true
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": 4.4452,
                        "nullable": true
                    },
                    "website": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "image_url": {
                        "type": "string",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "example": "manual"
                    },
                    "status": {
                        "type": "string",
                        "example": "verified"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Artist Checkins",
            "description": "API Endpoints for managing artist check-ins"
        },
        {
            "name": "Artists",
            "description": "API Endpoints for managing artists"
        },
        {
            "name": "Checkin Comments",
            "description": "API Endpoints for managing checkin comments"
        },
        {
            "name": "Checkins",
            "description": "API Endpoints for managing concert check-ins"
        },
        {
            "name": "Checkin Likes",
            "description": "API Endpoints for managing checkin likes"
        },
        {
            "name": "Checkin Photos",
            "description": "API Endpoints for managing checkin photos"
        },
        {
            "name": "Concerts",
            "description": "API Endpoints for managing concerts"
        },
        {
            "name": "Events",
            "description": "API Endpoints for managing events"
        },
        {
            "name": "Followers",
            "description": "API Endpoints for managing user follows"
        },
        {
            "name": "Genres",
            "description": "API Endpoints for managing music genres"
        },
        {
            "name": "Locations",
            "description": "API Endpoints for managing locations"
        }
    ]
}